#!/usr/bin/env python
# -*- coding: utf-8 -*-
import argparse
# from subprocess import call
import os
import shutil
import re



__author__="Ferez96"
__program__="comp"
__version__=0.1
__description__=\
"""Compile and run Competitive Programing Contest
	Support: g++"""


def check_bin():
	if not os.path.isdir('bin'):
		print('create bin folder')
		os.mkdir('bin')


def compile_cpp(args):
	compile_command = 'g++ -std=c++11 -o "{1}" "{0}"'
	run_command = '{0}'
	if args.source != None:
		for File in args.source:
			search_result = re.search('/?([a-zA-Z0-9_]*).cpp',File);
			if search_result == None:
				print('bad file name: '+File)
				continue
			FileName = search_result.group(1)
			print("\t=== "+FileName+" ===")
			OutputFile = 'bin/%s.o' % FileName
			temp_cc = compile_command.format(File,OutputFile)
			print("Compile command: " + temp_cc)
			check_bin()
			os.system(temp_cc)
			print('Run ' + OutputFile)
			os.system(run_command.format(OutputFile))
			print()
		return True
	return False


def handle(args):
	if args.clean:
		if os.path.isdir('bin'):
			shutil.rmtree('bin')
			print('Clean now!')
		else:
			print('Folder already clean')
		return True
	return compile_cpp(args)
	

def main():
	parser = argparse.ArgumentParser(prog=__program__,
		formatter_class=argparse.RawDescriptionHelpFormatter,
		description=__description__)
	parser.add_argument('-v', '--version', action='version', version=str(__version__))
	parser.add_argument('-c', '--clean', action='store_true', help='clean binary files in current directory')
	parser.add_argument('source',metavar='file',nargs='*',help='source code')
	args = parser.parse_args()
	if not handle(args):
		parser.print_help()


if __name__=="__main__":
	main()
	print()